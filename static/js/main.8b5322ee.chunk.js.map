{"version":3,"sources":["Components/Expenses/ExpenseDate.js","Components/Expenses/ExpenseTitle.js","Components/Expenses/ExpenseAmount.js","Components/UI/Card.js","Components/Expenses/ExpenseItem.js","Components/Expenses/ExpensesFilter.js","Components/Expenses/ExpensesList.js","Components/Chart/ChartBar.js","Components/Chart/Chart.js","Components/Expenses/ExpensesChart.js","Components/Expenses/Expenses.js","Components/NewExpenses/ExpenseForm.js","Components/NewExpenses/NewExpense.js","App.js","index.js"],"names":["ExpenseDate","props","month","date","toLocaleString","day","year","getFullYear","className","ExpenseTitle","title","ExpenseAmount","amount","Card","classes","children","ExpenseItem","ExpensesFilter","useState","setChosenYear","value","selected","onChange","event","target","setfilteredYear","ExpensesList","expensesContent","items","length","map","expense","id","ChartBar","barFillHeight","maxValue","Math","round","style","height","label","Chart","dataPointValues","dataPoints","dataPoint","totalMaximum","max","ExpensesChart","chartDataPoints","expenses","getMonth","Expenses","filteredYear","setFilteredYear","setCurrentExpenses","useEffect","expensesList","forEach","push","filteredList","filter","toString","selectedYear","ExpenseForm","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","onSubmit","preventDefault","expenseData","Date","onSaveExpenseData","type","placeholder","Number","min","class","onClick","onCancel","NewExpense","isEditing","setIsEditing","enteredExpenseData","floor","random","onAddExpense","DUMMY_EXPENSES","App","setExpenses","previousState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8b5322ee.chunk.js","sourcesContent":["import './ExpenseItem.css';\r\nimport './ExpenseDate.css'\r\nimport react from 'react';\r\n\r\nfunction ExpenseDate( props ){\r\n\r\n    // We're getting our date from the input field and converting it into usable data here\r\n    const month = props.date.toLocaleString('en-GB', { month: 'long' });\r\n    const day = props.date.toLocaleString( 'en-GB', { day: '2-digit' } );\r\n    const year = props.date.getFullYear();\r\n\r\n    /* Trying out React Native, it works a lot like JavaScript with <var>.createElement(\"div\") <var>.className=\"<className>\" etc...\r\n        const expenseDateOutput = \r\n        react.createElement('div', {className:'expense-date'},\r\n            react.createElement('div' , {className:'expense-date__day'}, day),\r\n            react.createElement('div' , {className:'expense-date__month'}, month),\r\n            react.createElement('div' , {className:'expense-date__year'}, year)\r\n        );\r\n\r\n        console.log( expenseDateOutput );\r\n        \r\n        return(\r\n            <div>{expenseDateOutput}</div>\r\n        );\r\n    */\r\n\r\n    // Output the date\r\n    return(\r\n        <div className=\"expense-date\">\r\n            <div className=\"expense-date__day\">   {day} </div>\r\n            <div className=\"expense-date__month\"> {month} </div>\r\n            <div className=\"expense-date__year\">  {year} </div>\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport default ExpenseDate;","import './ExpenseItem.css';\r\n\r\nfunction ExpenseTitle( props ){\r\n\r\n\r\n    return(\r\n        <h2> {props.title} </h2>\r\n    );\r\n}\r\n\r\nexport default ExpenseTitle;","import './ExpenseItem.css';\r\n\r\nfunction ExpenseAmount(props){\r\n\r\n    // Output the amount\r\n    return(\r\n        <div className=\"expense-item__price\">Â£{props.amount}</div>\r\n    );\r\n}\r\n\r\nexport default ExpenseAmount;","import './Card.css';\r\n\r\nfunction Card( props ) {\r\n\r\n    const classes = 'card ' + props.className;\r\n\r\n    return( \r\n        <div className={classes}>{props.children}</div>\r\n    );\r\n\r\n}\r\n\r\nexport default Card;","import './ExpenseItem.css';\r\nimport ExpenseDate from './ExpenseDate';\r\nimport ExpenseTitle from './ExpenseTitle';\r\nimport ExpenseAmount from './ExpenseAmount';\r\nimport Fizzbuzz from './Fizzbuzz';\r\nimport Card from '../UI/Card';\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nfunction ExpenseItem( props ){\r\n\r\n    // Generate a Card component here which contains all the expense information from the expenses array we pass through props\r\n    return(\r\n        <li>\r\n            <Card className=\"expense-item\">\r\n                <ExpenseDate date={props.date}/>\r\n                <div className=\"expense-item__description\">\r\n                    <ExpenseTitle title={props.title}/>\r\n                    <ExpenseAmount amount={props.amount}/>\r\n                </div>\r\n\r\n            </Card>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default ExpenseItem;","import React, { useState, useEffect } from 'react';\r\nimport './ExpensesFilter.css';\r\n\r\nconst ExpensesFilter = (props) => {\r\n\r\n  const [chosenYear, setChosenYear] = useState();    \r\n  // We're collecting our filtered through year here and passing it up\r\n  const chosenYearHandler = (event) => {\r\n      setChosenYear( event.target.value );\r\n      // Pass though to parent for two way binding\r\n      props.setfilteredYear( event.target.value );\r\n  }\r\n\r\n  // Render out filter drop-down\r\n  return (\r\n    <div className='expenses-filter'>\r\n      <div className='expenses-filter__control'>\r\n        <label>Filter by year</label>\r\n        <select value={props.selected} onChange={chosenYearHandler}>\r\n          <option value='2022'>2022</option>\r\n          <option value='2021'>2021</option>\r\n          <option value='2020'>2020</option>\r\n          <option value='2019'>2019</option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExpensesFilter;","import './ExpensesList.css';\r\nimport react, {useState, useEffect} from \"react\";\r\nimport ExpenseItem from './ExpenseItem';\r\n\r\nconst ExpensesList = (props) => {\r\n\r\n    // Our responsive if there are no expenses available\r\n    let expensesContent = <h2 className=\"expenses-list__fallback\">Found No Expenses</h2>;\r\n\r\n    // Exercise in conditional statements using React. Either return the filtered list or display the no expenses text\r\n    if( props.items.length === 0 ){\r\n        return( expensesContent )\r\n    }else{\r\n        return(\r\n            <ul className=\"expenses-list\">\r\n                {\r\n                    props.items.map(\r\n                        expense => (\r\n                                <ExpenseItem \r\n                \r\n                                //Always set the keys for a React Array in order to avoid the dreaded 'key' error!\r\n                                key={expense.id}\r\n                \r\n                                // The rest of the values come from props.items \r\n                                title={expense.title} \r\n                                amount={expense.amount} \r\n                                date={expense.date}>\r\n                \r\n                            </ExpenseItem>  \r\n                    ))\r\n                }\r\n            </ul>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default ExpensesList;","import React, {useState, useEffect} from \"react\";\r\nimport './ChartBar.css';\r\n\r\nconst ChartBar = (props) => {\r\n    \r\n    \r\n    let barFillHeight = '0%';\r\n\r\n    // Gets the % fill by getting the expenses amount and comparing it to the maximum expense amount\r\n    if(props.maxValue > 0){\r\n        barFillHeight = Math.round((props.value / props.maxValue) * 100) + '%';\r\n    }\r\n\r\n    // Return the bar\r\n    return(\r\n        <div className=\"chart-bar\">\r\n            <div className=\"chart-bar__inner\">\r\n                <div className=\"chart-bar__fill\" style={{height: barFillHeight}}></div>\r\n            </div>\r\n                <div className=\"chart-bar__label\">{props.label}</div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ChartBar; ","import react, {useState, useEffect} from \"react\";\r\nimport ChartBar from './ChartBar';\r\nimport './Chart.css'\r\n\r\nconst Chart = (props) =>{\r\n    // Takes a filtered list of expenses and maps through each month and collect expenses\r\n    const dataPointValues = props.dataPoints.map( dataPoint => dataPoint.value );\r\n    // Calculate the total maximum amount of expenses to compare the other bars to\r\n    const totalMaximum = Math.max(...dataPointValues);\r\n\r\n    // Render the bar chart\r\n    return(\r\n        <div className=\"chart\">\r\n            { props.dataPoints.map( dataPoint => \r\n                <ChartBar\r\n                    key={dataPoint.label} \r\n                    value={dataPoint.value} \r\n                    maxValue={totalMaximum}\r\n                    label={dataPoint.label}>\r\n                </ChartBar> ) \r\n            } \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Chart","import react from \"react\";\r\nimport Chart from \"../Chart/Chart\";\r\n\r\n\r\nconst ExpensesChart = (props) => {\r\n\r\n    // This component and its children are an exercise in dynamic styling \r\n    \r\n    // Create an array of every month of the year for our chart\r\n    const chartDataPoints = [\r\n        { label: 'Jan', value: 0 },\r\n        { label: 'Feb', value: 0 },\r\n        { label: 'Mar', value: 0 },\r\n        { label: 'Apr', value: 0 },\r\n        { label: 'May', value: 0 },\r\n        { label: 'Jun', value: 0 },\r\n        { label: 'Jul', value: 0 },\r\n        { label: 'Aug', value: 0 },\r\n        { label: 'Sep', value: 0 },\r\n        { label: 'Oct', value: 0 },\r\n        { label: 'Nov', value: 0 },\r\n        { label: 'Dec', value: 0 }\r\n    ];\r\n\r\n    // Adding the expense amount to the datapoint for each expense\r\n    for( const expense of props.expenses ){\r\n        const expenseMonth = expense.date.getMonth(); // Starting at 0\r\n        chartDataPoints[expenseMonth].value += expense.amount;\r\n\r\n    }\r\n\r\n    // Render our chart\r\n    return(\r\n        <Chart dataPoints={chartDataPoints}>\r\n\r\n        </Chart>\r\n    );\r\n}\r\n\r\nexport default ExpensesChart;","import ExpenseItem from \"./ExpenseItem\";\r\nimport ExpensesFilter from \"./ExpensesFilter\";\r\nimport './Expenses.css'\r\nimport Card from \"../UI/Card\";\r\nimport react, {useState, useEffect} from \"react\";\r\nimport ExpensesList from \"./ExpensesList\";\r\nimport ExpensesChart from \"./ExpensesChart\";\r\n\r\nfunction Expenses( props ){\r\n\r\n    // This is the year we're setting for the filter to decipher our entries, we're setting a state to begin with\r\n    const [filteredYear, setFilteredYear] = useState('2021');\r\n    \r\n    // We're passing this through to the child component so we can set a new year to filter entries by. We're using two way binding for this\r\n    const filterChangeHandler = (selectedYear) => {\r\n        setFilteredYear( selectedYear );\r\n    }\r\n\r\n    // Set a state variable based on prop items\r\n    const [expenses, setCurrentExpenses] = useState(props.items);\r\n\r\n    // Update the list whenever we get a new change\r\n    useEffect( () => {\r\n        setCurrentExpenses(props.items);\r\n    });\r\n\r\n\r\n    // Then we need an empty array in order to avoid errors\r\n    let expensesList = [];\r\n    \r\n    // Here, we're creating the dynamic array that is based on the expenses array passed through via props\r\n    expenses.forEach((expenses) => {\r\n        // Add it to the array  \r\n        expensesList.push( <ExpenseItem title={expenses.title} amount={expenses.amount} date={expenses.date}></ExpenseItem> );\r\n    }) \r\n\r\n    const expensesWarning = <p>No expenses found!</p>;\r\n\r\n    // Create a dynamic array which takes the expenses State and filteres it based on the current year\r\n    const filteredList = expenses.filter( expense => {return (expense.date.getFullYear().toString()) === filteredYear} );\r\n\r\n    // Render our expenses parent component cost\r\n    return(\r\n        <div>            \r\n            <Card className=\"expenses\"> \r\n                <ExpensesFilter selected={ filteredYear } setfilteredYear={filterChangeHandler}></ExpensesFilter>\r\n                <ExpensesChart expenses={filteredList}></ExpensesChart>\r\n                <ExpensesList items={filteredList}></ExpensesList>\r\n\r\n            </Card>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Expenses;","import react from \"react\";\r\nimport './ExpenseForm.css';\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nconst ExpenseForm = (props) => {\r\n\r\n    // Exercise in using React States. We're creating them here to capture our input values\r\n    const [enteredTitle, setEnteredTitle] = useState();\r\n    const [enteredAmount, setEnteredAmount] = useState();\r\n    const [enteredDate, setEnteredDate] = useState();\r\n\r\n    // Definitions for the state functions\r\n    const titleChangeHandler = (event) => {\r\n        setEnteredTitle( event.target.value );\r\n    }\r\n\r\n    const amountChangeHandler = (event) => {\r\n        setEnteredAmount( Number(event.target.value) );\r\n    }\r\n\r\n    const dateChangeHandler = (event) => {\r\n        setEnteredDate( event.target.value );\r\n    }\r\n\r\n    // We're using this event handler in order to prevent the page from reloading if we save the expense via preventDefault\r\n    // We are subsequently creating a new array using our states, and using two way binding to pass it back up\r\n    const submitFormHandler = (event) => {\r\n\r\n        // Ignore the first submission\r\n        event.preventDefault();\r\n \r\n        // Create new array of expense data\r\n        const expenseData = {\r\n            title:  enteredTitle,\r\n            amount: +enteredAmount,\r\n            date:   new Date(enteredDate)\r\n        };\r\n\r\n        props.onSaveExpenseData(expenseData);\r\n        // Empty our input fields once we've submitted the form data\r\n        setEnteredTitle('');\r\n        setEnteredAmount('');\r\n        setEnteredDate('');\r\n    }\r\n\r\n    // Render our new expense form and also exercise using event handlers\r\n    return(\r\n        <div className=\"new-expense__controls\">\r\n            <form onSubmit={submitFormHandler}> \r\n                <div className=\"new-expense__control\">\r\n                    <label> Title </label>\r\n                    <input type=\"text\" placeholder=\"Please enter your new title\" onChange={titleChangeHandler} value={enteredTitle}></input>\r\n                </div>\r\n                <div className=\"new-expense__control\">\r\n                    <label> Amount </label>\r\n                    <input type=\"number\"  onChange={amountChangeHandler} value={enteredAmount}></input>\r\n                </div>\r\n                <div className=\"new-expense__control\">\r\n                    <label> Date </label>\r\n                    <input type=\"date\" min=\"2021-09-26\" max=\"2099-12-31\" onChange={dateChangeHandler} value={enteredDate}></input>\r\n                </div>  \r\n                <div className=\"new-expense__control\">\r\n                    <button type=\"button\" class=\"cancel-button\" onClick={props.onCancel}> Cancel </button>\r\n                    <button type=\"submit\" class=\"\"> Add Expense </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ExpenseForm;","import react, {useState} from \"react\";\r\nimport './NewExpense.css';\r\nimport ExpenseForm from \"./ExpenseForm\";\r\n\r\nconst NewExpense = (props) => {\r\n\r\n    // This is a test of conditional code\r\n    const [isEditing, setIsEditing] = useState(false);\r\n\r\n    // Retrieve our expense data from the expense form. We're placing this into props and then passing it back up. \r\n    const saveDataExpenseHandler = (enteredExpenseData) => {\r\n\r\n        // Create a new expense and give it an ID between 0 and 100\r\n        const expenseData = {\r\n            id: 'e' + (Math.floor(Math.random() * 100)).toString(),\r\n            ...enteredExpenseData\r\n        };\r\n        props.onAddExpense(expenseData);\r\n        // Reload Add New Expense button\r\n        setIsEditing(false);\r\n    }\r\n\r\n    // Event handlers\r\n    const startEditingHandler = () => {\r\n        setIsEditing(true);\r\n    }\r\n\r\n    const stopEditingHandler = () => {\r\n        setIsEditing(false);\r\n    }\r\n\r\n    // Render our Add New Expense button or render our expense fomr\r\n    return(\r\n        <div className=\"new-expense\">\r\n            { !isEditing && <button onClick={startEditingHandler} type=\"button\">Add New Expense</button> }\r\n            { isEditing &&<ExpenseForm onCancel={stopEditingHandler} onSaveExpenseData={saveDataExpenseHandler} ></ExpenseForm> }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NewExpense;","import ExpenseItem from \"./Components/Expenses/ExpenseItem\";\r\nimport Expenses from \"./Components/Expenses/Expenses\";\r\nimport NewExpense from \"./Components/NewExpenses/NewExpense\";\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n// We're using dummy expenses here as we plan to integrate live databases at a later stage of learning. Next.js is on the list!\r\nconst DUMMY_EXPENSES = [\r\n  {\r\n    id: 'e1',\r\n    title: 'Toilet Paper',\r\n    amount: 94.12,\r\n    date: new Date(2020, 7, 14),\r\n  },\r\n  {\r\n    id: 'e2',\r\n    title: 'New TV',\r\n    amount: 799.49,\r\n    date: new Date(2021, 2, 12)\r\n  },\r\n  {\r\n    id: 'e3',\r\n    title: 'Car Insurance',\r\n    amount: 294.67,\r\n    date: new Date(2021, 2, 28),\r\n  },\r\n  {\r\n    id: 'e4',\r\n    title: 'New Desk (Wooden)',\r\n    amount: 450,\r\n    date: new Date(2021, 5, 12),\r\n  },\r\n];\r\n\r\nfunction App() {\r\n\r\n  // Get the starting state, if it's empty then create an acceptable input\r\n  const [expenses, setExpenses] = useState(DUMMY_EXPENSES);\r\n\r\n  // This is called in the child component to pass the updated expense back up\r\n  const addExpenseHandler = (expense) => {\r\n    // DUMMY_EXPENSES here is a reference to the current state file which works like a function\r\n    setExpenses((previousState) => {\r\n        return [expense, ...previousState];\r\n      }\r\n    );}\r\n\r\n  return (\r\n    <div>\r\n\r\n      <h2 className=\"page-title\">\r\n          <span className=\"welcome-text\">\r\n            Welcome, this is my expenses tracker :).\r\n          </span>\r\n      </h2>\r\n      {/* Render our new expense and expenses component we obtain using states from our child components */}\r\n      <NewExpense onAddExpense={addExpenseHandler}></NewExpense>\r\n      <Expenses items={expenses}> </Expenses>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","import ReactDOM from 'react-dom';\r\nimport React from 'react';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n"],"sourceRoot":""}